'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ledger = function ledger(log_name) {
  var parentDir = _path2.default.dirname(module.parent.filename),
      lname = _path2.default.resolve(parentDir, log_name) + '.log';

  var newLog = new log(lname);

  // make append the default function call
  ledger[log_name] = log.prototype.append.bind(newLog);

  // connect all prototype methods onto the log reference
  Object.getOwnPropertyNames(log.prototype).forEach(function (property) {
    ledger[log_name][property] = log.prototype[property].bind(newLog);
  });

  // no need to expose the constructor
  delete ledger[log_name].constructor;

  return newLog.reset();
};

// used internally to manage the logs

var log = (function () {
  function log(lname) {
    _classCallCheck(this, log);

    this.path = lname;
  }

  _createClass(log, [{
    key: 'append',
    value: function append(data, callback) {
      _fs2.default.appendFile(this.path, data, 'utf8', callback);
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _this = this;

      var callback = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];

      return new Promise(function (resolve, reject) {
        _fs2.default.writeFile(_this.path, '', 'utf8', function (err) {
          err ? reject() : resolve(_this);
          callback(err);
        });
      });
    }
  }]);

  return log;
})();

exports.default = ledger;
