'use strict'

import { assert } from 'chai'

import path from 'path'
import fs from 'fs'
import log from '../src/index'

describe('loggerer', () => {
  let myLog = `${__dirname}/myLog`

  it('takes an argument and creates a .log file of that name in the parent script\'s directory', (done) => {
    log('myLog1')
    fs.stat(`${myLog}1.log`, (err, stats) => {
      assert(!err, 'there was no error in stat\'ing')
      assert.isTrue(stats.isFile(), 'the log file exists')
      done()
    })
  })
  it('returns a promise', () => {
    assert.instanceOf(log('myLog1'), Promise, 'is a Promise')
  })
  describe('multiple log file support', () => {
    it('creates the files...', (done) => {
      Promise.all([log('myLog2'), log('myLog3'), log('myLog4')]).then(logs => {
        fs.stat(`${__dirname}/myLog2.log`, (err, stats) => {
          assert(!err, 'there was no error')
          assert.isTrue(stats.isFile(), 'is file')
          fs.stat(`${__dirname}/myLog3.log`, (err, stats) => {
            assert(!err, 'there was no error')
            assert.isTrue(stats.isFile(), 'is file')
            fs.stat(`${__dirname}/myLog4.log`, (err, stats) => {
              assert(!err, 'there was no error')
              assert.isTrue(stats.isFile(), 'is file')
              done()
            })
          })
        }) 
      }, values => {
        assert.fail()
      })
    })
    it('manages writes to the files...', (done) => {
      log.myLog2('hello myLog2', (err) => {
        assert(!err, 'there was no error')
        fs.readFile(`${myLog}2.log`, 'utf8', (err, data) => {
          assert(!err, 'there was no error reading the log file')
          assert.include(data, 'hello myLog2', 'contains correct data')
          log.myLog3('hello myLog3', (err) => {
            assert(!err, 'there was no error')
            fs.readFile(`${myLog}3.log`, 'utf8', (err, data) => {
              assert(!err, 'there was no error reading the log file')
              assert.include(data, 'hello myLog3', 'contains correct data')
              done()
            })
          })
        })
      })
    })
  })

  describe('log file', () => {
    it('should be accessible via dot notation on the loggerer namespace', () => {
      assert.ok(log.myLog1, 'myLog exists on loggerer namespace')
    })
    it('should be a function which accepts data to write to the file', (done) => {
      log.myLog1('hello world', (err) => {
        assert(!err, 'there was no error')
        fs.readFile(`${myLog}1.log`, 'utf8', (err, data) => {
          assert(!err, 'there was no error reading the log file')
          assert.include(data, 'hello world', 'contains correct data')
          done()
        })
      })
    })
    describe('log.myLog.reset()', () => {
      it('should clear the contents of the log file', (done) => {
        log.myLog1.reset(err => {
          assert(!err, 'there was no error with reset')
          fs.readFile(`${myLog}1.log`, 'utf8', (err, data) => {
            assert(!err, 'there was no error reading file')
            assert.strictEqual(data, '', 'file is empty')
            done()
          })
        })
      })
      it('returns a promise', () => {
        assert.instanceOf(log.myLog1.reset(), Promise, 'is a Promise')
      })
    })
  })
})
